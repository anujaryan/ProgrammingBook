Maven in 5 Minutes:
Installation: (Prerequisites)
1.Maven is a Java tool, so you must have Java installed in order to proceed.
2. Download maven from official sites
3.Then set maven home path like as We set java path give path to bin directory
4.Then run mvn -version 


Maven Command:
1.Creating a Project
>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

2.It will create directory of named as parameter passed to artifactId in our case my-app
3.Go to directory 
>cd my-app
>Inside this directory maven create below directories
1. src/main/java directory contains the project source code, 
2. the src/test/java directory contains the test source,
3. pom.xml file is the project's Project Object Model, or POM. 
4.The POM
The pom.xml file is the core of a project's configuration in Maven. It is a single configuration file that contains the majority of information required to build a project in just the way you want:

Ex:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
 
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <version>1.0-SNAPSHOT</version>
 
  <properties>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>
 
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>

Maven goal> 
> mvn archetype:generate, and passed in various parameters to that goal.
>The prefix archetype is the plugin that provides the goal
>This archetype:generate goal created a simple project based upon a maven-archetype-quickstart archetype

Maven-PlugIn>

> Plugin is a collection of goals with a general common purpose. For example the jboss-maven-plugin, whose purpose is "deal with various jboss items"

1.Build the Project
>mvn package

> you may notice the second is simply a single word - package. Rather than a goal, this is a phase.

>A phase is a step in the build lifecycle, which is an ordered sequence of phases. When a phase is given, Maven will execute every phase in the sequence up to and including the one defined

 if we execute the compile phase, the phases that actually get executed are:

validate
generate-sources
process-sources
generate-resources
process-resources
compile

 <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


2.Determining active profiles during build? 
>mvn help:active-profiles

Running Maven Tools:

Maven Phases:
3.To validate build
>mvn validate 	       : validate the project is correct and all necessary information is available
4.To compile the build 
>mvn compile           : compile the source code of the project
5.To test the build 
> mvn test             : test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
6.To package the build 
> mvn package          : take the compiled code and package it in its distributable format, such as a JAR.
7.To integration-test of build 
>mvn integration-test  : process and deploy the package if necessary into an environment where integration tests can be run.
8.to  verify the build 
>mvn verify            : run any checks to verify the package is valid and meets quality criteria
9. To install the build 
>mvn install           :      the package into the local repository, for use as a dependency in other projects locally.
10. to deploy the build 
>mvn deploy            : done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
11.to clean build 
>mvn clean             : cleans up artifacts created by prior builds
12. to create document 
>mvn site              : generates site documentation for this project


13.phases and goals may be executed in sequence.
>mvn clean dependency:copy-dependencies package
>This command will clean the project, copy dependencies, and package the project (executing all phases up to package,